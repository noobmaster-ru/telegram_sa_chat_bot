import re
import logging
import asyncio

from aiogram import Router, F
from aiogram.types import Message,  CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from src.bot.states.user_flow import UserFlow

from src.ai_module.open_ai_requests_class import OpenAiRequestClass
from src.google_sheets.google_sheets_class import GoogleSheetClass
from src.bot.keyboards.get_yes_no_keyboard import get_yes_no_keyboard

router = Router()

# --- –†–µ–≥—É–ª—è—Ä–∫–∏ ---
# –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 16 –ø–æ–¥—Ä—è–¥ —Ü–∏—Ñ—Ä –∏–ª–∏ 4 –≥—Ä—É–ø–ø—ã –ø–æ 4 —Å –ø—Ä–æ–±–µ–ª–æ–º/–¥–µ—Ñ–∏—Å–æ–º
card_pattern = r"\b(?:\d{16}|\d{4}(?:[ -]\d{4}){3})\b"

# –°—É–º–º–∞ —Å "—Ä", "—Ä—É–±", "‚ÇΩ"
amount_pattern = r"(\d+\s?(?:—Ä|—Ä—É–±|—Ä—É–±–ª–µ–π|‚ÇΩ|–†|–†—É–±–ª–µ–π))"

# –¢–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7910... –∏–ª–∏ 8910... –∏–ª–∏ 7910...
# phone_pattern = r"\b(?:\+7\d{10}|8\d{10}|7\d{10})\b"
phone_pattern = r"\b(?:\+7|8|7)[\s\-()]?\d{3}[\s\-()]?\d{3}[\s\-()]?\d{2}[\s\-()]?\d{2}\b"

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
bank_pattern = (
    r"\b("
    r"—Å–±–µ—Ä(?:–±–∞–Ω–∫)?|—Ç–∏–Ω—å–∫–æ—Ñ—Ñ|—Ç[-\s]?–±–∞–Ω–∫|–∞–ª—å—Ñ–∞(?:–±–∞–Ω–∫)?|"
    r"–≤—Ç–±|–≥–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫|—Ä–∞–π—Ñ+–∞–π–∑–µ–Ω|—Ä–æ—Å–±–∞–Ω–∫|–æ—Ç–∫—Ä—ã—Ç–∏–µ|–ø–æ—á—Ç–∞–±–∞–Ω–∫|—Å–æ–≤–∫–æ–º–±–∞–Ω–∫"
    r")\b"
)


# --- –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: ---
@router.business_message(StateFilter(UserFlow.waiting_for_requisites))
async def handle_requisites_message(
    message: Message,
    spreadsheet: GoogleSheetClass,
    ADMIN_ID_LIST: list,
    state: FSMContext,
    client_gpt_5: OpenAiRequestClass
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏:
    ‚Äî –∏—â–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω, —Å—É–º–º—É, –∫–∞—Ä—Ç—É, –±–∞–Ω–∫
    ‚Äî –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –ø—Ä–æ—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç—å
    ‚Äî –µ—Å–ª–∏ –≤—Å—ë –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    """
    
    telegram_id = message.from_user.id
    # —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º—ã —Å —Ç–µ–º–æ–π
    if telegram_id not in ADMIN_ID_LIST:
        return

    text = message.text.strip() if message.text else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await spreadsheet.update_buyer_last_time_message(telegram_id=telegram_id)


    # --- –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö ---
    cards = re.findall(card_pattern, text)
    amounts = re.findall(amount_pattern, text, flags=re.IGNORECASE)
    phones = re.findall(phone_pattern, text)
    bank_match = re.search(bank_pattern, text, flags=re.IGNORECASE)
    
    # –ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–ª–∏ None)
    card_number = cards[0] if cards else None
    amount = amounts[0] if amounts else None
    phone_number = phones[0] if phones else None
    bank = bank_match.group(0).capitalize() if bank_match else None



    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ FSM ---
    data = await state.get_data()
    # logging.info(data) - {} –≤—ã–≤–æ–¥–∏—Ç
    if card_number:
        data["card_number"] = re.sub(r"[ -]", "", card_number)
    if amount:
        data["amount"] = amount
    if phone_number:
        data["phone_number"] = re.sub(r"^\+?8", "8", phone_number)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
    if bank:
        data["bank"] = bank
    await state.update_data(**data)
    
    
    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –ª–∏ –µ—Å—Ç—å ---
    card_number = data.get("card_number")
    phone = data.get("phone_number")
    amt = data.get("amount")
    bank_name = data.get("bank")
    logging.info(f"card_number = {card_number} , phone = {phone}, amount = {amt}, bank = {bank_name}")
    
    # –µ—Å–ª–∏ –±–∞–Ω–∫, –∫–∞—Ä—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å—É–º–º–∞
    if bank_name and card_number and  phone_number and amt:
        await message.answer(
            f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
            f"–ë–∞–Ω–∫: `{bank}`\n"
            f"–°—É–º–º–∞: `{amt}`\n\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
            parse_mode="Markdown",
            reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
        )
        await state.set_state(UserFlow.confirming_requisites)
        return
    
    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –±–∞–Ω–∫
    if bank_name and not card_number and not phone_number and not amt:
        await message.answer(
            f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"–ë–∞–Ω–∫: `{bank}`\n\n"
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.",
            parse_mode="Markdown"
        )
        await state.set_state(UserFlow.waiting_for_card_or_phone_number)
        return
    
    # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ , –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –±–∞–Ω–∫, –Ω–æ –Ω–µ—Ç —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
    if phone and card_number and bank_name and not amt:
        await message.answer(
            f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
            f"–ë–∞–Ω–∫: `{bank}`\n\n"
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
            parse_mode="Markdown"
        )
        await state.set_state(UserFlow.waiting_for_amount)
        return
    
    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (phone or card_number) and not bank_name and not amt:
        if phone:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                parse_mode="Markdown"
            )
        if card_number:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                parse_mode="Markdown"
            )  
        await state.set_state(UserFlow.waiting_for_amount)
        return
    
    # –µ—Å–ª–∏ –Ω–µ—Ç —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞
    if bank_name and (phone or card_number) and not amt:
        if phone and card_number:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
                f"–ë–∞–Ω–∫: `{bank}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                parse_mode="Markdown"
            )
        elif card_number:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
                f"–ë–∞–Ω–∫: `{bank}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                parse_mode="Markdown"
            ) 
        else:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
                f"–ë–∞–Ω–∫: `{bank}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                parse_mode="Markdown"
            )
        await state.set_state(UserFlow.waiting_for_amount)
        return
    
    # –µ—Å–ª–∏ –Ω–µ—Ç –±–∞–Ω–∫–∞ 
    if not bank_name and (phone or card_number) and amt:
        if phone and card_number:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
                f"–°—É–º–º–∞: `{amt}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–°–±–µ—Ä–±–∞–Ω–∫*, *–¢-–±–∞–Ω–∫*)",
                parse_mode="Markdown"
            )
        elif card_number:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number or ''}`\n"
                f"–°—É–º–º–∞: `{amt or ''}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–°–±–µ—Ä–±–∞–Ω–∫*, *–¢-–±–∞–Ω–∫*)",
                parse_mode="Markdown"
            ) 
        else:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone}`\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_number}`\n"
                f"–°—É–º–º–∞: `{amt}`\n\n"
                f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–°–±–µ—Ä–±–∞–Ω–∫*, *–¢-–±–∞–Ω–∫*)",
                parse_mode="Markdown"
            ) 
        await state.set_state(UserFlow.waiting_for_bank)
        return
    
    # --- –ï—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å(—Ç–µ–ª–µ—Ñ–æ–Ω, –±–∞–Ω–∫ , —Å—É–º–º–∞), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    if all(k in data for k in ("phone_number", "amount", "bank")):
        await message.answer(
            f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data['phone_number']}`\n"
            f"–ë–∞–Ω–∫: {data['bank']}\n"
            f"–°—É–º–º–∞: `{data['amount']}`\n\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
            parse_mode="Markdown",
            reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
        )
        await state.set_state(UserFlow.confirming_requisites)
        return 
    
    # --- –ï—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å(–∫–∞—Ä—Ç–∞, –±–∞–Ω–∫ , —Å—É–º–º–∞), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    if all(k in data for k in ("card_number", "amount", "bank")):
        await message.answer(
            f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
            f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {data['card_number']}\n"
            f"–ë–∞–Ω–∫: {data['bank']}\n"
            f"–°—É–º–º–∞: `{data['amount']}`\n\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
            parse_mode="Markdown",
            reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
        )
        await state.set_state(UserFlow.confirming_requisites)
        return 

@router.business_message(StateFilter(UserFlow.waiting_for_amount))
async def handle_amount(message: Message, state: FSMContext):
    text = message.text.strip()
    amounts = re.findall(amount_pattern, text, flags=re.IGNORECASE)
    amount = amounts[0] if amounts else None
    await state.update_data(amount=amount)

    data = await state.get_data()
    if data.get('bank'):
        if data.get('card_number'):
            if data.get('phone_number'):
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                    f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                await state.set_state(UserFlow.confirming_requisites)
                return
            else:
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                await state.set_state(UserFlow.confirming_requisites)
                return
        elif data.get('phone_number'):
            if data.get('card_number'):
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                    f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                await state.set_state(UserFlow.confirming_requisites)
                return
            else:
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                await state.set_state(UserFlow.confirming_requisites)
                return
        # await state.set_state(UserFlow.confirming_requisites)
    else:
        await message.answer(
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–°–±–µ—Ä–±–∞–Ω–∫*, *–¢-–±–∞–Ω–∫*)",
            parse_mode="Markdown"
        )  
        await state.set_state(UserFlow.waiting_for_bank)


@router.business_message(StateFilter(UserFlow.waiting_for_card_or_phone_number))
async def handle_amount(message: Message, state: FSMContext):
    text = message.text.strip()
    # --- –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö ---
    cards = re.findall(card_pattern, text)
    phones = re.findall(phone_pattern, text)
    
    # –ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–ª–∏ None)
    card_number = cards[0] if cards else None
    phone_number = phones[0] if phones else None

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤ FSM ---
    data = await state.get_data()
    # logging.info(data) - {} –≤—ã–≤–æ–¥–∏—Ç
    if card_number:
        data["card_number"] = re.sub(r"[ -]", "", card_number)
    if phone_number:
        data["phone_number"] = re.sub(r"^\+?8", "7", phone_number)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç
    await state.update_data(**data)
    

    data = await state.get_data()
    if data.get('bank'):
        if data.get('card_number'):
            if data.get('amount'):
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number', '')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank', '')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount', '')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                return 
            else:
                await message.answer(
                    f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                    parse_mode="Markdown"
                )  
                await state.set_state(UserFlow.waiting_for_amount)
                return 
        if data.get('phone_number'):
            if data.get('amount'):
                await message.answer(
                    f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                    f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number', '')}`\n"
                    f"–ë–∞–Ω–∫: {data.get('bank', '')}\n"
                    f"–°—É–º–º–∞: `{data.get('amount', '')}`\n\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                    parse_mode="Markdown",
                    reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
                )
                return 
            else:
                await message.answer(
                    f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 —Ä—É–±–ª–µ–π",
                    parse_mode="Markdown"
                )  
                await state.set_state(UserFlow.waiting_for_amount)
                return 
        await state.set_state(UserFlow.confirming_requisites)
        return
    else:
        await message.answer(
            f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–°–±–µ—Ä–±–∞–Ω–∫*, *–¢-–±–∞–Ω–∫*)",
            parse_mode="Markdown"
        )  
        await state.set_state(UserFlow.waiting_for_bank)
        return

@router.business_message(StateFilter(UserFlow.waiting_for_bank))
async def handle_bank_name(message: Message, state: FSMContext):
    text = message.text.strip().title()
    bank_match = re.search(bank_pattern, text, flags=re.IGNORECASE)
    bank = bank_match.group(0).capitalize() if bank_match else None
    await state.update_data(bank=bank)

    data = await state.get_data()

    if data.get('card_number'):
        if data.get('phone_number'):
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                parse_mode="Markdown",
                reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
            )
            await state.set_state(UserFlow.confirming_requisites)
            return
        else:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                parse_mode="Markdown",
                reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
            )
            await state.set_state(UserFlow.confirming_requisites)
            return
    if data.get('phone_number'):
        if data.get('card_number'):
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{data.get('card_number')}`\n"
                f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                parse_mode="Markdown",
                reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
            )
            await state.set_state(UserFlow.confirming_requisites)
            return 
        else:
            await message.answer(
                f"üì© –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number')}`\n"
                f"–ë–∞–Ω–∫: {data.get('bank')}\n"
                f"–°—É–º–º–∞: `{data.get('amount')}`\n\n"
                f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ?",
                parse_mode="Markdown",
                reply_markup=get_yes_no_keyboard("confirm_requisites", "–≤–µ—Ä–Ω–æ")
            )
            await state.set_state(UserFlow.confirming_requisites)
            return




@router.callback_query(StateFilter(UserFlow.confirming_requisites), F.data == "confirm_requisites_no")
async def confirm_requisites_no(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ.
    """
    await state.clear()
    await state.set_state(UserFlow.waiting_for_requisites)
    await callback.message.edit_text(
        "‚ùå –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å—É–º–º—É –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )


@router.callback_query(StateFilter(UserFlow.confirming_requisites), F.data == "confirm_requisites_yes")
async def confirm_requisites_yes(
    callback: CallbackQuery, 
    state: FSMContext,
    spreadsheet: GoogleSheetClass,
    BUYERS_SHEET_NAME: str,
):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–µ—Ä–Ω—ã–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    data = await state.get_data()
    telegram_id = callback.from_user.id

    tasks = [
        spreadsheet.update_buyer_button_status(
            sheet_name=BUYERS_SHEET_NAME,
            telegram_id=telegram_id,
            button_name="requisites",
            value=data.get('card_number', '-')
        ),
        spreadsheet.update_buyer_button_status(
            sheet_name=BUYERS_SHEET_NAME,
            telegram_id=telegram_id,
            button_name="amount",
            value=data.get('amount', '-')
        ),
        spreadsheet.update_buyer_button_status(
            sheet_name=BUYERS_SHEET_NAME,
            telegram_id=telegram_id,
            button_name="phone_number",
            value=data.get('phone_number', '-')
        ),
        spreadsheet.update_buyer_button_status(
            sheet_name=BUYERS_SHEET_NAME,
            telegram_id=telegram_id,
            button_name="bank",
            value=data.get('bank', '-')
        )
    ]
    await asyncio.gather(*tasks)
    await state.clear()
    await callback.message.edit_text(
        f"üì© –†–µ–∫–≤–∏–∑–∏—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã:\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{data.get('phone_number', '')}`\n"
        f"–ë–∞–Ω–∫: {data.get('bank', '')}\n"
        f"–°—É–º–º–∞: `{data.get('amount', '')}`\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —Å–ø–∞—Å–∏–±–æ ‚ò∫Ô∏è",
        parse_mode="Markdown"
    )