import logging
from aiogram import Router,  types, F
from aiogram.types import Message
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext


from src.bot.keyboards.get_yes_no_keyboard import get_yes_no_keyboard
from src.bot.states.user_flow import UserFlow


from src.services.open_ai_requests_class import OpenAiRequestClass
from src.services.google_sheets_class import GoogleSheetClass

import redis.asyncio as asyncredis


async def is_known_user(
    redis: asyncredis,
    REDIS_KEY_SET_TELEGRAM_IDS: str,
    user_id: int,
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ user_id –≤ Redis."""
    return await redis.sismember(REDIS_KEY_SET_TELEGRAM_IDS, user_id)


router = Router()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        logging.StreamHandler(),  # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)


# —Å–ø–∏—Å–æ–∫ "–¥–æ–±—Ä—ã—Ö" —Å–ª–æ–≤
OK_WORDS = {"–æ–∫","–û–∫", "—Å–ø–∞—Å–∏–±–æ", "–°–ø–∞—Å–∏–±–æ", "—Å–ø–∞—Å–∏–±–æ!", "–°–ø–∞—Å–∏–±–æ!", "—Ö–æ—Ä–æ—à–æ", "–•–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–æ–∫–µ–π", "–¥–∞", "–æ–∫.", "–æ–∫!", "–æ–∫–µ–π!", "—Ö–æ—Ä–æ—à–æ,—Å–µ–π—á–∞—Å", "–ø–æ–Ω—è–ª"}

# –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.business_message(Command('reset'))
async def reset_admin(
    message: types.Message,
    spreadsheet: GoogleSheetClass,
    ADMIN_ID_LIST: list,
    state: FSMContext
):
    telegram_id = message.from_user.id
    if telegram_id in ADMIN_ID_LIST:
        await spreadsheet.delete_row(telegram_id)
        await state.clear()
        await message.answer("bot reseted!")

@router.business_message(StateFilter("generating"))
async def wait_response(message: Message):
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ...")


@router.business_message(StateFilter(UserFlow.continue_dialog))
async def handle_other_message(
    message: Message, 
    state: FSMContext, 
    instruction_str: str,
    spreadsheet: GoogleSheetClass,
    BUYERS_SHEET_NAME: str,
    nm_id: str,
    ADMIN_ID_LIST: list,
    client_gpt_5: OpenAiRequestClass
    # FIRST_MESSAGE_LIST: list
):
    telegram_id = message.from_user.id
    text = message.text if message.text else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"

    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await spreadsheet.update_buyer_last_time_message(telegram_id=telegram_id)

    if "?" in text: 
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è(–ø–æ–∫–∞ –æ—Ç–≤–µ—Ç –æ—Ç –≥–ø—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è)
        await state.set_state('generating')
        gpt5_response_text = await client_gpt_5.create_gpt_5_response(new_prompt=text)
        await state.set_state(UserFlow.continue_dialog)
        await message.answer(gpt5_response_text)
    else:
        if len(text) > 10:
            await state.set_state('generating')
            gpt5_response_text = await client_gpt_5.create_gpt_5_response(new_prompt=text)
            await state.set_state(UserFlow.continue_dialog)
            await message.answer(gpt5_response_text)    
        elif text in OK_WORDS:
            await message.answer("üëç")
        else:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

# –∑–¥–µ—Å—å –Ω–∞–¥–æ –±—ã–ª–æ business_message —É–∫–∞–∑–∞—Ç—å!!!!!
# –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≤–∏—Ç - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
@router.business_message(StateFilter(None))
async def handle_business_message(
    message: Message, 
    state: FSMContext, 
    instruction_str: str,
    spreadsheet: GoogleSheetClass,
    BUYERS_SHEET_NAME: str,
    nm_id: str,
    ADMIN_ID_LIST: list,
    client_gpt_5: OpenAiRequestClass,
    REDIS_KEY_SET_USERS_ID: str,
    redis: asyncredis
    # FIRST_MESSAGE_LIST: list
):
    telegram_id = message.from_user.id
    username = message.from_user.username or "-"
    full_name = message.from_user.full_name or "-"
    text = message.text if message.text else "-"

    # —É–∂–µ –ø–∏—Å–∞–ª –Ω–∞–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if await is_known_user(redis, REDIS_KEY_SET_USERS_ID, telegram_id):
        return

    # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await spreadsheet.add_new_buyer(
        sheet_name=BUYERS_SHEET_NAME,
        username=username,
        telegram_id=telegram_id,
        nm_id=nm_id
    )
    # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(
        f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç (@{username}, {full_name}), id={telegram_id}: {text} ..."
    )


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    await message.answer(
        instruction_str,
        parse_mode="MarkdownV2",
    )
    # –ü–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?"
    await message.answer(
        "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?",
        reply_markup=get_yes_no_keyboard("agree", "—Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)")
    )
    # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ–ª–µ "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?"
    await state.set_state(UserFlow.waiting_for_agreement)

    
