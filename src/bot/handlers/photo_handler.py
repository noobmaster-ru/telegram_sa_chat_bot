from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging
from src.bot.keyboards.get_yes_no_keyboard import get_yes_no_keyboard
from src.services.google_sheets_class import GoogleSheetClass
from src.bot.states.user_flow import UserFlow


from src.bot.handlers.message_handler import is_known_user
import redis.asyncio as asyncredis

router = Router()


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class PhotoStates(StatesGroup):
    waiting_for_photo_confirmation = State()
    photo_type = State()  # "order" –∏–ª–∏ "shk"

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==== !!! bussiness_message!!!!
@router.business_message(F.photo)
async def handle_photo(
    message: Message,
    state: FSMContext,
    spreadsheet: GoogleSheetClass,
    ADMIN_ID_LIST: list,
    redis: asyncredis,
    REDIS_KEY_SET_USERS_ID: str
):
    user_data = await state.get_data()
    telegram_id = message.from_user.id
    photo_type = user_data.get("photo_type", "order")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–¥—ë–º —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
    
    # —É–∂–µ –ø–∏—Å–∞–ª –Ω–∞–º ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if await is_known_user(redis, REDIS_KEY_SET_USERS_ID, telegram_id):
        logging.info(f"{telegram_id} in redis database , skip")
        await message.answer()
        return
    
    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await spreadsheet.update_buyer_last_time_message(telegram_id=telegram_id)
    
    if photo_type == "order":
        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
        await message.answer(
            "üì∏ –≠—Ç–æ —Å–∫—Ä–∏–Ω –∑–∞–∫–∞–∑–∞?",
            reply_markup=get_yes_no_keyboard(
                callback_prefix="photo_order_", 
                statement="—Å–∫—Ä–∏–Ω –∑–∞–∫–∞–∑–∞"
            )
        )
    elif photo_type == "shk":
        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö
        await message.answer(
            "üì∏ –≠—Ç–æ —Å–∫—Ä–∏–Ω —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö?",
            reply_markup=get_yes_no_keyboard(
                callback_prefix="photo_shk_",
                statement="—Å–∫—Ä–∏–Ω —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö")
        )
    # other type
    else:
        await message.edit_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ====
@router.callback_query(F.data.startswith("photo_order_"))
async def handle_photo_order(
    callback: CallbackQuery,
    state: FSMContext,
    CHANNEL_USERNAME: str,
    nm_id: str
):
    answer = "yes" if callback.data.endswith("yes") else "no"
    username = callback.from_user.username or "–±–µ–∑ username"

    if answer == "yes":
        await callback.message.edit_text("‚úÖ –§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ!")
        # —Ç–µ–ø–µ—Ä—å –∂–¥—ë–º —Ñ–æ—Ç–æ –®–ö
        await state.update_data(photo_type="shk")
        current_state = await state.get_state() 
        if current_state == UserFlow.waiting_for_agreement:
            await callback.message.answer(
                "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?",
                reply_markup=get_yes_no_keyboard("agree", "—Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)")
            )
            await state.set_state(UserFlow.waiting_for_agreement)
        elif current_state == UserFlow.waiting_for_subcription_to_channel:
            # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            await callback.message.edit_text(
                "‚ùå –ü–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî —Ä–∞–∑–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_yes_no_keyboard("subscribe", "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)")
            )
            await state.set_state(UserFlow.waiting_for_subcription_to_channel)
        elif current_state == UserFlow.waiting_for_order:
            # üëâ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            await callback.message.edit_text(
                f"üì¶ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä {nm_id}?", 
                reply_markup=get_yes_no_keyboard("order", "–∑–∞–∫–∞–∑–∞–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_order)
        elif current_state == UserFlow.waiting_for_order_receive:
            await callback.message.edit_text(
                f"üì¨ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä {nm_id}?", 
                reply_markup=get_yes_no_keyboard("receive", "–ø–æ–ª—É—á–∏–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_order_receive)
        elif current_state == UserFlow.waiting_for_feedback:
            # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await callback.message.edit_text(
                f"üí¨ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ {nm_id}?", 
                reply_markup=get_yes_no_keyboard("feedback", "–æ—Å—Ç–∞–≤–∏–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_feedback)
        # current_state == UserFlow.waiting_for_shk:
        else:
            # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await callback.message.edit_text(
                f"‚úÇÔ∏è –®–ö —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –Ω–∞ {nm_id}?", 
                reply_markup=get_yes_no_keyboard("shk", "—Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_shk)
    else:
        try:
            await callback.message.edit_text("‚ùå –§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.")
        except:
            await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞.")

    await callback.answer()

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ –®–ö ====
@router.callback_query(F.data.startswith("photo_shk_"))
async def handle_photo_shk(
    callback: CallbackQuery, 
    state: FSMContext,
    CHANNEL_USERNAME: str,
    nm_id: str
):
    answer = "yes" if callback.data.endswith("yes") else "no"
    username = callback.from_user.username or "–±–µ–∑ username"

    if answer == "yes":
        await callback.message.edit_text("‚úÖ –§–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö –ø—Ä–∏–Ω—è—Ç–æ!")
        await state.update_data(photo_type="other_type")
        # —Ç–µ–ø–µ—Ä—å –∂–¥—ë–º —Ñ–æ—Ç–æ –®–ö
        current_state = await state.get_state() 
        if current_state == UserFlow.waiting_for_agreement:
            await callback.message.answer(
                "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?",
                reply_markup=get_yes_no_keyboard("agree", "—Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)")
            )
            await state.set_state(UserFlow.waiting_for_agreement)
        elif current_state == UserFlow.waiting_for_subcription_to_channel:
            # –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            await callback.message.edit_text(
                "‚ùå –ü–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî —Ä–∞–∑–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {CHANNEL_USERNAME} –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=get_yes_no_keyboard("subscribe", "–ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–ª–∞—Å—å)")
            )
            await state.set_state(UserFlow.waiting_for_subcription_to_channel)
        elif current_state == UserFlow.waiting_for_order:
            # üëâ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            await callback.message.edit_text(
                f"üì¶ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä {nm_id}?", 
                reply_markup=get_yes_no_keyboard("order", "–∑–∞–∫–∞–∑–∞–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_order)
        elif current_state == UserFlow.waiting_for_order_receive:
            await callback.message.edit_text(
                f"üì¨ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä {nm_id}?", 
                reply_markup=get_yes_no_keyboard("receive", "–ø–æ–ª—É—á–∏–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_order_receive)
        elif current_state == UserFlow.waiting_for_feedback:
            # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await callback.message.edit_text(
                f"üí¨ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ {nm_id}?", 
                reply_markup=get_yes_no_keyboard("feedback", "–æ—Å—Ç–∞–≤–∏–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_feedback)
        # current_state == UserFlow.waiting_for_shk:
        else:
            # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await callback.message.edit_text(
                f"‚úÇÔ∏è –®–ö —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –Ω–∞ {nm_id}?", 
                reply_markup=get_yes_no_keyboard("shk", "—Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)")
            )
            await state.set_state(UserFlow.waiting_for_shk)
    else:
        try:
            await callback.message.edit_text("‚ùå –§–æ—Ç–æ –®–ö –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.")
        except:
            await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω—ã—Ö –®–ö.")

    await callback.answer()
