from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from aiogram.filters import StateFilter
from src.bot.keyboards.get_yes_no_keyboard import get_yes_no_keyboard
from src.bot.states.user_flow import UserFlow

from src.google_sheets.google_sheets_class import GoogleSheetClass

router = Router()

# –Æ–∑–µ—Ä –ø–æ—Å–ª–µ "üì¶ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä?" –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–∫—É—é-—Ç–æ
@router.callback_query(StateFilter(UserFlow.waiting_for_order), F.data.startswith("order_"))
async def handle_order_answer(
    callback: CallbackQuery, 
    spreadsheet: GoogleSheetClass, 
    BUYERS_SHEET_NAME: str,
    state: FSMContext,
    nm_id: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    telegram_id = callback.from_user.id
    data = callback.data

    key = data.split("_")[0]
    value = "–î–∞" if data.endswith("_yes") else "–ù–µ—Ç"

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É
    await spreadsheet.update_buyer_button_status(
        sheet_name=BUYERS_SHEET_NAME,
        telegram_id=telegram_id,
        button_name=key,
        value=value
    )

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–ù–µ—Ç" ‚Üí –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
    if value == "–ù–µ—Ç":
        try:
            await callback.message.edit_text(
                f"–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∂–µ—Ç–µ —Ç–æ–≤–∞—Ä {nm_id}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –∑–∞–∫–∞–∑–∞–ª(–∞)'",
                reply_markup=get_yes_no_keyboard("order", "–∑–∞–∫–∞–∑–∞–ª(–∞)")
            )
        except:
            await callback.message.edit_text(
                f"–ù—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä {nm_id}, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∂–µ—Ç–µ —Ç–æ–≤–∞—Ä - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –∑–∞–∫–∞–∑–∞–ª(–∞)'",
                reply_markup=get_yes_no_keyboard("order", "–∑–∞–∫–∞–∑–∞–ª(–∞)")
            )
        await state.set_state(UserFlow.waiting_for_order)
        return
    await callback.message.edit_text(
        f"üì¨ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä {nm_id}?", 
        reply_markup=get_yes_no_keyboard("receive", "–ø–æ–ª—É—á–∏–ª(–∞)")
    )
    await state.set_state(UserFlow.waiting_for_order_receive)


# –Æ–∑–µ—Ä –ø–æ—Å–ª–µ "üì¨ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä?" –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–∫—É—é-—Ç–æ
@router.callback_query(StateFilter(UserFlow.waiting_for_order_receive), F.data.startswith("receive_"))
async def handle_receive_answer(
    callback: CallbackQuery, 
    spreadsheet: GoogleSheetClass, 
    BUYERS_SHEET_NAME: str,
    state: FSMContext,
    nm_id: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    telegram_id = callback.from_user.id
    data = callback.data

    key = data.split("_")[0]
    value = "–î–∞" if data.endswith("_yes") else "–ù–µ—Ç"


    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É
    await spreadsheet.update_buyer_button_status(
        sheet_name=BUYERS_SHEET_NAME,
        telegram_id=telegram_id,
        button_name=key,
        value=value
    )

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–ù–µ—Ç" ‚Üí –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
    if value == "–ù–µ—Ç":
        try:
            await callback.message.edit_text(
                f"–ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä {nm_id}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –ø–æ–ª—É—á–∏–ª(–∞)'", 
                reply_markup=get_yes_no_keyboard("receive", "–ø–æ–ª—É—á–∏–ª(–∞)")
            )
        except:
            await callback.message.edit_text(
                f"–ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä {nm_id}, –ø–æ—Å–ª–µ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –∑–∞–∫–∞–∑–∞–ª(–∞)'",
                reply_markup=get_yes_no_keyboard("order", "–∑–∞–∫–∞–∑–∞–ª(–∞)")
            )
        await state.set_state(UserFlow.waiting_for_order_receive)
        return
    # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await callback.message.edit_text(
        f"üí¨ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ {nm_id}?", 
        reply_markup=get_yes_no_keyboard("feedback", "–æ—Å—Ç–∞–≤–∏–ª(–∞)")
    )
    await state.set_state(UserFlow.waiting_for_feedback)

    
# –Æ–∑–µ—Ä –ø–æ—Å–ª–µ "üí¨ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤?" –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–∫—É—é-—Ç–æ
@router.callback_query(StateFilter(UserFlow.waiting_for_feedback), F.data.startswith("feedback_"))
async def handle_feedback_answer(
    callback: CallbackQuery, 
    spreadsheet: GoogleSheetClass, 
    BUYERS_SHEET_NAME: str,
    state: FSMContext,
    nm_id: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    telegram_id = callback.from_user.id
    data = callback.data

    key = data.split("_")[0]
    value = "–î–∞" if data.endswith("_yes") else "–ù–µ—Ç"


    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É
    await spreadsheet.update_buyer_button_status(
        sheet_name=BUYERS_SHEET_NAME,
        telegram_id=telegram_id,
        button_name=key,
        value=value
    )

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–ù–µ—Ç" ‚Üí –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
    if value == "–ù–µ—Ç":
        try:
            await callback.message.edit_text(
                f"–ö–æ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä {nm_id}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –æ—Å—Ç–∞–≤–∏–ª(–∞)'", 
                reply_markup=get_yes_no_keyboard("feedback", "–æ—Å—Ç–∞–≤–∏–ª(–∞)")
            )
        except:
            await callback.message.edit_text(
                f"–ù—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ 5 –∑–≤–µ–∑–¥ –Ω–∞ —Ç–æ–≤–∞—Ä {nm_id}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, –æ—Å—Ç–∞–≤–∏–ª(–∞)'", 
                reply_markup=get_yes_no_keyboard("feedback", "–æ—Å—Ç–∞–≤–∏–ª(–∞)")
            )
        await state.set_state(UserFlow.waiting_for_feedback)
        return
    # ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await callback.message.edit_text(
        f"‚úÇÔ∏è –®–ö —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –Ω–∞ {nm_id}?", 
        reply_markup=get_yes_no_keyboard("shk", "—Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)")
    )
    await state.set_state(UserFlow.waiting_for_shk)


# –Æ–∑–µ—Ä –ø–æ—Å–ª–µ "‚úÇÔ∏è –®–ö —Ä–∞–∑—Ä–µ–∑–∞–ª–∏?" –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞–∫—É—é-—Ç–æ
@router.callback_query(StateFilter(UserFlow.waiting_for_shk), F.data.startswith("shk_"))
async def handle_shk_answer(
    callback: CallbackQuery, 
    spreadsheet: GoogleSheetClass, 
    BUYERS_SHEET_NAME: str,
    state: FSMContext,
    nm_id: str
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    telegram_id = callback.from_user.id
    data = callback.data

    key = data.split("_")[0]
    value = "–î–∞" if data.endswith("_yes") else "–ù–µ—Ç"


    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—É
    await spreadsheet.update_buyer_button_status(
        sheet_name=BUYERS_SHEET_NAME,
        telegram_id=telegram_id,
        button_name=key,
        value=value
    )

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–ù–µ—Ç" ‚Üí –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
    if value == "–ù–µ—Ç":
        try:
            await callback.message.edit_text(
                f"–ö–æ–≥–¥–∞ —Ä–∞–∑—Ä–µ–∂–µ—Ç–µ –®–ö –æ—Ç {nm_id}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, —Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)'", 
                reply_markup=get_yes_no_keyboard("shk", "—Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)")
            )
        except:
            await callback.message.edit_text(
                f"–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å –®–ö —Ç–æ–≤–∞—Ä–∞ {nm_id}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞, —Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)'", 
                reply_markup=get_yes_no_keyboard("shk", "—Ä–∞–∑—Ä–µ–∑–∞–ª(–∞)")
            )
        await state.set_state(UserFlow.waiting_for_shk)
        return
    
    # ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    await callback.message.edit_text("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ!")
    await callback.message.answer("‚ò∫Ô∏è –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã/—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    await state.set_state(UserFlow.waiting_for_requisites)