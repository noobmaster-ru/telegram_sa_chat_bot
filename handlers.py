from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from database import user_exists, add_user
import logging

from generators import create_response

router = Router()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("data/bot.log", encoding="utf-8"),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        logging.StreamHandler(),  # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)

ADMIN_ID_LIST = [694144143, 547299317]

# —Å–ø–∏—Å–æ–∫ "–¥–æ–±—Ä—ã—Ö" —Å–ª–æ–≤
OK_WORDS = {"–æ–∫", "ok", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–æ–∫–µ–π", "–¥–∞", "–æ–∫.", "–æ–∫!", "–æ–∫–µ–π!", "—Ö–æ—Ä–æ—à–æ,—Å–µ–π—á–∞—Å", "–ø–æ–Ω—è–ª"}


@router.message(StateFilter("generating"))
async def wait_response(message: Message):
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ...")

# –∑–¥–µ—Å—å –Ω–∞–¥–æ –±—ã–ª–æ business_message —É–∫–∞–∑–∞—Ç—å!!!!!
@router.business_message()
async def handle_message(
    message: Message, 
    state: FSMContext, 
    instruction_str: str,
    LOWER_LIMIT_OF_MESSAGE_LENGTH: int
):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    full_name = message.from_user.full_name or "–±–µ–∑ full_name"
    text = message.text if message.text else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"


    # —Ç–µ—Å—Ç - –æ—Ç–≤–µ—á–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —è –∏ —Ç–µ–º–∞
    if user_id in ADMIN_ID_LIST and not user_exists(user_id):
        add_user(user_id, username)

        # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info(
            f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç (@{username}, {full_name}), id={user_id}: {text} ..."
        )
        await message.answer(instruction_str, parse_mode="MarkdownV2")
    
    # —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —è –∏ —Ç–µ–º–∞
    elif user_id in ADMIN_ID_LIST:
        # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        text = message.text.strip().lower()   
        if "?" in text: 
            # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è(–ø–æ–∫–∞ –æ—Ç–≤–µ—Ç –æ—Ç –≥–ø—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è)
            await state.set_state('generating')
            try: 
                response = create_response(text, instruction_str)
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            else:
                await message.answer(response)
            finally:
                await state.clear()
        else:
            if len(text) > LOWER_LIMIT_OF_MESSAGE_LENGTH:
                await state.set_state('generating')
                try: 
                    response = create_response(text, instruction_str)
                except Exception as e:
                    await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                else:
                    await message.answer(response)
                finally:
                    await state.clear()
            elif text in OK_WORDS:
                await message.answer("üëç")
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
