from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext


import logging
import re

from ai_module.generators import create_gpt_5_response
from google_sheets.google_sheets_class import GoogleSheetClass


from handlers.keyboards.get_agreement_keyboard import get_agreement_keyboard

router = Router()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("data/bot.log", encoding="utf-8"),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        logging.StreamHandler(),  # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ],
)

# ADMIN_ID_LIST = [694144143, 547299317]
first_message = []
# —Å–ø–∏—Å–æ–∫ "–¥–æ–±—Ä—ã—Ö" —Å–ª–æ–≤
OK_WORDS = {"–æ–∫", "ok", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–æ–∫–µ–π", "–¥–∞", "–æ–∫.", "–æ–∫!", "–æ–∫–µ–π!", "—Ö–æ—Ä–æ—à–æ,—Å–µ–π—á–∞—Å", "–ø–æ–Ω—è–ª"}


@router.message(StateFilter("generating"))
async def wait_response(message: Message):
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ...")

# –∑–¥–µ—Å—å –Ω–∞–¥–æ –±—ã–ª–æ business_message —É–∫–∞–∑–∞—Ç—å!!!!!
@router.business_message(F.text)
async def handle_business_message(
    message: Message, 
    state: FSMContext, 
    instruction_str: str,
    LOWER_LIMIT_OF_MESSAGE_LENGTH: int,
    spreadsheet: GoogleSheetClass,
    BUYERS_SHEET_NAME: str,
    nm_id: str,
    ADMIN_ID_LIST: list
):
    telegram_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    full_name = message.from_user.full_name or "–±–µ–∑ full_name"
    text = message.text if message.text else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"


    # —Ç–µ—Å—Ç - –æ—Ç–≤–µ—á–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —è –∏ —Ç–µ–º–∞
    if telegram_id in ADMIN_ID_LIST and not telegram_id in first_message: #and not user_exists(user_id)
        # add_user(user_id, username)
        first_message.append(telegram_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        spreadsheet.add_new_buyer(
            sheet_name=BUYERS_SHEET_NAME,
            username=username,
            telegram_id=telegram_id,
            nm_id=nm_id
        )
        # –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info(
            f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç (@{username}, {full_name}), id={telegram_id}: {text} ..."
        )

        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(
            instruction_str,
            parse_mode="MarkdownV2",
        )
        # –ü–æ—Å–ª–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?"
        await message.answer(
            "–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ —É—Å–ª–æ–≤–∏—è?",
            reply_markup=get_agreement_keyboard()
        )
    # —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —è –∏ —Ç–µ–º–∞
    elif telegram_id in ADMIN_ID_LIST:
        
        # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        spreadsheet.update_buyer_last_time_message(
            sheet_name=BUYERS_SHEET_NAME,
            username=username
        )

        # # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —É —Å–æ–æ–±—â–µ–Ω–∏—è
        # text = message.text.strip().lower()   
        # pattern = r"#–≤—ã–ø–ª–∞—Ç–∞_\d{1,2}_[–∞-—è–ê-–Ø—ë–Å]+"
        if "?" in text: 
            # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è(–ø–æ–∫–∞ –æ—Ç–≤–µ—Ç –æ—Ç –≥–ø—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª—Å—è)
            await state.set_state('generating')
            try: 
                gpt5_response_text = create_gpt_5_response(
                    telegram_id,
                    text, 
                    instruction_str
                )
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            finally:
                await state.clear()
            await message.answer(gpt5_response_text)
        else:
            if len(text) > LOWER_LIMIT_OF_MESSAGE_LENGTH:
                await state.set_state('generating')
                try: 
                    gpt5_response_text = create_gpt_5_response(
                        telegram_id,
                        text, 
                        instruction_str
                    )
                except Exception as e:
                    await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")            
                finally:
                    await state.clear()
                await message.answer(gpt5_response_text)    
            elif text in OK_WORDS:
                await message.answer("üëç")
            # elif re.fullmatch(pattern, text):
            #     # —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º #–≤—ã–ø–ª–∞—Ç–∞_DD_MONTH
            #     await message.answer("–í–´–ü–õ–ê–¢–ê_–ü–†–ò–ù–ò–ú–ê–ï–¢–°–Ø")
            #     # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheet
            elif "#" in text:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã. "
                    "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ —à–∞–±–ª–æ–Ω—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤: #–≤—ã–ø–ª–∞—Ç–∞_DD_MONTH"
                )
            else:
                await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
