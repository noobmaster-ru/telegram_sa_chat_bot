# handlers/photo_handler.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers.keyboards.get_yes_no_keyboard import get_yes_no_keyboard
from google_sheets.google_sheets_class import GoogleSheetClass
router = Router()


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class PhotoStates(StatesGroup):
    waiting_for_photo_confirmation = State()
    photo_type = State()  # "order" –∏–ª–∏ "shk"

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==== !!! bussiness_message!!!!
@router.business_message(F.photo)
async def handle_photo(
    message: Message,
    state: FSMContext,
    spreadsheet: GoogleSheetClass,
    BUYERS_SHEET_NAME: str,
    ADMIN_ID_LIST: list
):
    user_data = await state.get_data()
    telegram_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    photo_type = user_data.get("photo_type", "order")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∂–¥—ë–º —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
    if telegram_id in ADMIN_ID_LIST:
        # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        spreadsheet.update_buyer_last_time_message(
            sheet_name=BUYERS_SHEET_NAME,
            telegram_id=telegram_id
        )
        if photo_type == "order":
            # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
            await message.answer(
                "üì∏ –≠—Ç–æ —Å–∫—Ä–∏–Ω –∑–∞–∫–∞–∑–∞?",
                reply_markup=get_yes_no_keyboard(
                    callback_prefix="photo_order_", 
                    statement="—Å–∫—Ä–∏–Ω –∑–∞–∫–∞–∑–∞"
                )
            )
        elif photo_type == "shk":
            # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö
            await message.answer(
                "üì∏ –≠—Ç–æ —Å–∫—Ä–∏–Ω —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö?",
                reply_markup=get_yes_no_keyboard(
                    callback_prefix="photo_shk_",
                    statement="—Å–∫—Ä–∏–Ω —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö")
            )
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ====
@router.callback_query(F.data.startswith("photo_order_"))
async def handle_photo_order(callback: CallbackQuery, state: FSMContext):
    answer = "yes" if callback.data.endswith("yes") else "no"
    username = callback.from_user.username or "–±–µ–∑ username"

    if answer == "yes":
        await callback.message.answer("‚úÖ –§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ!")
        # —Ç–µ–ø–µ—Ä—å –∂–¥—ë–º —Ñ–æ—Ç–æ –®–ö
        await state.update_data(photo_type="shk")
    else:
        await callback.message.answer("‚ùå –§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.")

    await callback.answer()

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ –®–ö ====
@router.callback_query(F.data.startswith("photo_shk_"))
async def handle_photo_shk(callback: CallbackQuery, state: FSMContext):
    answer = "yes" if callback.data.endswith("yes") else "no"
    username = callback.from_user.username or "–±–µ–∑ username"

    if answer == "yes":
        await callback.message.answer("‚úÖ –§–æ—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –®–ö –ø—Ä–∏–Ω—è—Ç–æ!")
        await state.clear()  # flow –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—á–∏—â–∞–µ–º state
    else:
        await callback.message.answer("‚ùå –§–æ—Ç–æ –®–ö –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.")

    await callback.answer()
