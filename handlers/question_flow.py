from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F

from google_sheets.google_sheets_class import GoogleSheetClass


from handlers.keyboards.get_yes_no_keyboard import get_yes_no_keyboard
router = Router()

questions = [
    ("order", "üì¶ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ–≤–∞—Ä?"),
    ("receive", "üì¨ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä?"),
    ("feedback", "üí¨ –í—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤?"),
    ("shk", "‚úÇÔ∏è –®–ö —Ä–∞–∑—Ä–µ–∑–∞–ª–∏?")
]


# === –°—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ===
async def start_buyer_flow(message: Message, spreadsheet: GoogleSheetClass, BUYERS_SHEET_NAME: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""
    username = message.from_user.username or "–±–µ–∑ username"
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º üëá")

    # # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–ø—Ä–æ—Å (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    # spreadsheet.update_buyer_button_status(
    #     sheet_name=BUYERS_SHEET_NAME,
    #     username=username,
    #     button_name="buyer_flow",
    #     value="–Ω–∞—á–∞—Ç"
    # )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    await ask_next_question(message, spreadsheet, BUYERS_SHEET_NAME, 0)

async def ask_next_question(message, spreadsheet: GoogleSheetClass, BUYERS_SHEET_NAME: str, index: int):
    """–ó–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    if index >= len(questions):
        await message.answer("‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ!")
        return

    key, text = questions[index]
    await message.answer(text, reply_markup=get_yes_no_keyboard(key))

# –ª–æ–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–ª–±–µ–∫–∏ –∏–∑ questions
@router.callback_query(F.data.regexp(r"^(order|receive|feedback|shk)_(yes|no)$"))
async def handle_question_answer(callback: CallbackQuery, spreadsheet: GoogleSheetClass, BUYERS_SHEET_NAME: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç"""
    username = callback.from_user.username or "–±–µ–∑ username"
    data = callback.data

    key = data.split("_")[0]
    value = "–î–∞" if data.endswith("_yes") else "–ù–µ—Ç"

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    spreadsheet.update_buyer_button_status(
        sheet_name=BUYERS_SHEET_NAME,
        username=username,
        button_name=key,
        value=value
    )

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–ù–µ—Ç" ‚Üí –∑–∞–¥–∞—ë–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑
    if value == "–ù–µ—Ç":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        await callback.message.answer(
            dict(questions)[key],
            reply_markup=get_yes_no_keyboard(key)
        )
        await callback.answer()
        return

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç "–î–∞" ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index = next(i for i, (k, _) in enumerate(questions) if k == key)
    await ask_next_question(callback.message, spreadsheet, BUYERS_SHEET_NAME, current_index + 1)
    await callback.answer()